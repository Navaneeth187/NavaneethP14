# Password Generator (Random Characters using ASCII) ‚Äì C Program
--------------------------------------------------------------------------------------------------------------
This C program generates a secure password of user-defined length  
using random characters including uppercase, lowercase, digits, and symbols from the ASCII table.  
It‚Äôs a great practice for random number generation, loops, and character handling in C.  
--------------------------------------------------------------------------------------------------------------

# FEATURES
1. Generates random password of desired length  
2. Uses ASCII values for uppercase, lowercase, digits, and symbols  
3. Secure and unpredictable output  
4. Optionally customizable for character sets  
--------------------------------------------------------------------------------------------------------------

# STEPS
1. Save the code as `password_generator.c`  
2. Compile it using a C compiler (e.g., `gcc password_generator.c -o password_generator`)  
3. Run the program (`./password_generator` or `password_generator.exe`)  
4. Enter the desired password length to generate a secure password  
--------------------------------------------------------------------------------------------------------------

# CODE
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int length, i;
    char password[100]; // Max length 99

    printf("üîê Password Generator\n");
    printf("Enter desired password length (max 99): ");
    scanf("%d", &length);

    if (length <= 0 || length > 99) {
        printf("‚ùå Invalid length. Please enter a value between 1 and 99.\n");
        return 1;
    }

    srand(time(0)); // Seed random generator

    for (i = 0; i < length; i++) {
        int type = rand() % 4;
        switch(type) {
            case 0: // Uppercase A-Z (ASCII 65-90)
                password[i] = (char)(65 + rand() % 26);
                break;
            case 1: // Lowercase a-z (ASCII 97-122)
                password[i] = (char)(97 + rand() % 26);
                break;
            case 2: // Digits 0-9 (ASCII 48-57)
                password[i] = (char)(48 + rand() % 10);
                break;
            case 3: // Symbols (ASCII 33‚Äì47)
                password[i] = (char)(33 + rand() % 15);
                break;
        }
    }

    password[length] = '\0'; // Null-terminate the string

    printf("‚úÖ Your generated password: %s\n", password);

    return 0;
}
--------------------------------------------------------------------------------------------------------------

# Usage Tips
- You can modify the ASCII ranges to include more/less characters  
- Useful for building login systems or secure token generators  
- Consider using secure random generators for production-grade applications  
--------------------------------------------------------------------------------------------------------------
